#!/usr/bin/env node
'use strict';
const program = require('commander'),
	server = require('../lib/fserver'),
	debug = require('debug')('liveview:cli'),
	chalk = require('chalk');

const {
	green,
	grey,
	red
} = chalk;

function log(message) {
	if (process.env.SILENT) {
		return;
	}
	console.log(green('[LiveView]'), message);
}

function logError(message) {
	if (process.env.SILENT) {
		return;
	}
	console.error(red('[LiveView]'), message);
}
program.usage('<command> [options]');

program
	.description('LiveView server related functionality, such as start, stop, restart.')
	.option('--liveview-ip [host]', 'server IP address')
	.option('--liveview-fport [fport]', 'file server port')
	.option('--liveview-eport [eport]', 'event server port')
	.option('-p, --project-dir [path]', 'path to project')
	.option('-d, --daemonize', 'server as background daemon')
	.option('--no-colors', 'disable cli coloring')
	.option('--platform [platform]', 'build platform *required for alloy compiles');

// sub-command help
program.on('--help', function () {
	console.log('\n  Commands:');
	console.log();
	console.log('    start [options]     start file/event server');
	console.log('    stop [options]      stop file/event server');
	console.log('    restart [options]   restart file/event server');
	console.log('    status [options]    list running file/event server');
	console.log('    pids [options]      list running file/event pid file paths');
	console.log();
	process.exit();
});

// parse argv
program.parse(process.argv);

// command
const cmd = (program.args[0] || '').toLowerCase();
if (!cmd) {
	process.stdout.write(program.helpInformation());
	program.emit('--help');
	process.exit();
}

switch (cmd) {
	case 'pids':
		try {
			const pids = server.pids();
			log(`Current running servers pid files:\n${pids.join('\n').trim() || grey('No Active Servers')}`);
		} catch (e) {
			logError(`Unable to get pids ${e}`);
		}
		break;
	case 'restart':
		server.restart();
		break;
	case 'start':
		try {
			server.start(program);
		} catch (e) {
			logError(`Unable to start server ${e}`);
		}
		break;
	case 'stop':
		server.stop(true);
		break;
	case 'status':
		try {
			const status = server.status();
			log(`Current running servers:${status || grey('\nNo Active Servers')}`);
		} catch (e) {
			logError(`Unable to get server status ${e}`);
		}
		break;
	default:
		logError(`Unknown command ${red(cmd)}`);
		process.stdout.write(program.helpInformation());
		program.emit('--help');
		break;

}
