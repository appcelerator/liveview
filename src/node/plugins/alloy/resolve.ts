import path from 'path';
import { Plugin } from 'vite';

/**
 * Provides special resolve rules for Alloy.
 *
 * - Resolves files from the `lib` or `assets` directories.
 * - Resolves URLs generated by `WPATH` to their source files inside a
 *   Widget's `lib` directory.
 */
export function resolvePlugin(appDir: string): Plugin {
	return {
		name: 'titanium:alloy:resolve',
		async resolveId(id, importer) {
			if (id.startsWith('.')) {
				return;
			}

			if (id.startsWith('/')) {
				// check WPATH generated url `/<widget>/<id>`
				const secondSlashIndex = id.indexOf('/', 1);
				if (secondSlashIndex === -1) {
					const widgetId = id.slice(1, secondSlashIndex);
					const relativeId = id.slice(secondSlashIndex + 1);
					const result = await this.resolve(
						path.join(appDir, 'widgets', widgetId, 'lib', relativeId),
						importer,
						{
							skipSelf: true,
							custom: {
								titanium: {
									resolveBase: path.join(appDir, 'widgets', widgetId, 'lib')
								}
							}
						}
					);
					if (result) {
						return result.id;
					}
				}
			}

			// check `app/lib` and `app/assets`
			id = id.replace(/^\//, '');
			const dirs = [path.join(appDir, 'lib'), path.join(appDir, 'assets')];
			for (const base of dirs) {
				const result = await this.resolve(path.resolve(base, id), importer, {
					skipSelf: true,
					custom: {
						titanium: {
							resolveBase: base
						}
					}
				});
				if (result) {
					return result.id;
				}
			}
		}
	};
}
